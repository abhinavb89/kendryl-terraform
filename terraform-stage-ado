# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: default
 # vmImage: ubuntu-latest

variables:
  provider: 'azurerm'
  command: 'init'
  backendServiceArm: 'azureado'
  backendAzureRmResourceGroupName: 'terraform-storage'
  backendAzureRmStorageAccountName: 'terraformstategop'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'adotfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tfinit
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azureado'
              backendAzureRmResourceGroupName: 'terraform-storage'
              backendAzureRmStorageAccountName: 'terraformstategop'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: '$(backendAzureRmKey)'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'azureado'
  - stage: tfdeploy
    condition: and (succeeded(),ne(variables['Build.Reason'],'PullRequest'))
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
           
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azureado'
              backendAzureRmResourceGroupName: 'terraform-storage'
              backendAzureRmStorageAccountName: 'terraformstategop'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'
              
  
      - job: approve
        dependsOn: plan
        condition: and (succeeded(),ne(variables['Build.Reason'],'PullRequest'))
        #any job yyou want to run on azure devops always put pool: server 
        pool: server
        displayName: wait for approval
        steps:
          
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              instructions: 'please approve the job'
              emailRecipients: 'gopal1409@gmail.com'
              onTimeout: 'reject'
          
      - job: apply
        dependsOn: plan
        condition: and (succeeded(),ne(variables['Build.Reason'],'PullRequest'))
        pool: default
        displayName: applying the same
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: reintilzied required for tfstate
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azureado'
              backendAzureRmResourceGroupName: 'terraform-storage'
              backendAzureRmStorageAccountName: 'terraformstategop'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: '$(backendAzureRmKey)'
          - task: TerraformTaskV4@4
            displayName: creating the resource
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'azureado'
